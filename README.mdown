Copyright 2015 Martin Ellison. For GPL3 licence notice, see the end of this file.

# Convertor

This program creates 'choose your own adventure' games as a single HTML file. It has a similar function to Twine http://twinery.org (and Twine 2) but the games are simpler to deploy, install and play as there is only one HTML/Javascript file to distribute. Also the game is more robust as it does not depend on any external files.

The convertor reads in a text file in its own format (different from Twine or Twine 2 formats) and generates the HTML/Javascript file. The syntax of the input file is somewhat unwieldy and may change in later versions.

Coding input text requires some knowldege of simple HTML and Javascript, as these are embedded in the input file.

The convertor is written in Go (Golang).

## Usage

  `-dir` *string*
    	directory for files (default ".")
		
  `-h` display help

  `-hash`
    	use hash escapes for text
		
  `-help`
    	display help
		
  `-in` *string*
    	input file name (default "test.data")
		
  `-jsout` *string*
    	Javascript output file name (if not specified, Javascript will be embedded in the HTML)
		
  `-log` *string*
    	log file name (for debugging)
		
  `-out` *string*
    	output file name (default "testout.html")

Typical usage is `./conv -dir path/to/dir -in mygame.txt -out mygame.html`

The -jsout option is used to create a separate file with the Javascript. This can be run through a formatter if you want to browse the source.

The -log option is for debugging the convertor.


The -hash option is used to replace all text strings with &#...; HTML entities to discourage casual browsing of the game text. Of course, this does not provide any security.

## Input language

### Elements

The syntax contains the following elements:

`/* ... */` comment, ignored

`$/ .... /$` embedded Javascript statements

`$( .... )$` embedded Javascript expressions; the value is output to the page

`$[ .... ]$` directives

`$< ... >$` embedded HTML (output unescaped)

any other text represents ordinary text which is passed through (HTML special characters are escaped so they will appear unchanged)

###Directives

The following directives are currently accepted:

**page** *pagename*   starts a new page

**link** *linkname* ... **goto** *targetpagename*    creates a link that moves to a new page

**link** *linkname* ... **act** .... **end**     creates a link that executes/generates text

**link** *linkname* ...    creates a link

**div** *linkname* ... **end**    creates a div group; when the link of the same name is clicked the div will be executed/generated

**span** *linkname* ... **end**    creates a span group; when the link of the same name is clicked the span will be executed/generated

**include** *pagename*   includes the indicated page at that point

These need to be properly escaped so the code will actually look like, say:

	$[link]$ Drink the potion $[act]$ You feel a bit $<i>$strange$</i>$ $/ gd.drunkPotion = true; /$ $[end]$
	
Then the text "Drink the potion" will appear, formatted as a link. If the user clicks on the link, the text "You feel a bit *strange*" will appear (with 'strange' in italics) and the variable `gd.drunkPotion` will be set to true.

### Javascript

Javascript may refer to the following variables:

gd (global data)   the game may use this hash to store state e.g. gd.knowsThePassword gd.inventory etc

currentPage  contains the name of the current page (useful inside included pages)

Javascript is used for controlling the page, for example:

	$/ if gd.drunkPotion { /$ You feel OK. $/} else { /$ You are dead. $/ gd.alive = false; } /$
	
This will do different things depending on the value of `gd.drunkPotion` (i.e. presumably whether they have drunk the potion).

##Installation

###Downloads

There is a Linux 64-bit binary available.

There is also a Windows 64-bit binary available, but it has not been tested on Windows (and it does not work on Wine).

###Building from source

The source can be checked out from github or downloaded.

The only dependency is the Go (Golang http://golang.org) build system. All the imported packages are in the standard distribution.

The program can be built from source using the `build.sh` script included with the source distribution.

The result is just a single executable.

### Dependencies

The run.sh script uses js-beautify from https://github.com/beautify-web/js-beautify This is not a requirement for normal use; js-beautify is only used to de-obfuscate the generated Javascript for debugging.

The generated HTML/Javascript does not have any dependencies (except if the -jsout option is used, then the HTML requires the Javascript).